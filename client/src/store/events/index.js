/**Events export index */

import {
    ApproveEvent,
    ByAlphabeticalOrganizers,
    ByAlphabeticalOrganizersDefault,
    ByDateEvents,
    ByDateLatestEvents,
    ByLocationTypeEvents,
    createEvent,
    deleteEvent,
    DisapproveEvent,
    filterByStartEndDate,
    getEvents,
    PublishEvent,
    searchByCategories,
    searchEvents,
    searchEventsForMap,
    searchTitleEventsForMap,
    submitEvent,
    UnpublishEvent,
    GetPublicEvents,
    GetSingleEvent,
    subscribeEvent,
    unsubscribe,
    getSubscribes,
    clearEventStatus,
    publishEvent,
    filterByStartEndDateTime,
    singleEventRemove,
    createEventClear,
    setEventStatus,
    editEvent,
    getPendingSponsors,
    getEventSponsors,
    getEventSponsorsForEdit,
    approveOrRejectSponsor, removeEventSponsorsList, editNote, createRsvp, editRsvp, getCurrentRsvp
} from "./events.action";

export { eventsReducer } from './events.reducer';
export { watchEvents } from './events.saga';
export { GET_EVENTS, GET_EVENTS_SUCCESS } from './events.types';

export const EventsActions = {
    createEvent,
    editEvent,
    createEventClear,
    getEvents,
    getSubscribes,
    deleteEvent,
    ByDateEvents,
    ByDateLatestEvents,
    ByAlphabeticalOrganizers,
    ByAlphabeticalOrganizersDefault,
    searchEvents,
    submitEvent,
    ByLocationTypeEvents,
    UnpublishEvent,
    publishEvent,
    GetPublicEvents,
    GetSingleEvent,
    searchEventsForMap,
    searchTitleEventsForMap,
    filterByStartEndDate,
    searchByCategories,
    subscribeEvent,
    unsubscribe,
    clearEventStatus,
    filterByStartEndDateTime,
    singleEventRemove,
    setEventStatus,

    // event sponsors
    getPendingSponsors,
    removeEventSponsorsList,
    getEventSponsors,
    getEventSponsorsForEdit,
    approveOrRejectSponsor,
    editNote,

    // Rsvp
    createRsvp,
    editRsvp,
    getCurrentRsvp,
};
